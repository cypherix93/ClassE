{"version":3,"sources":["angular-bundle.js"],"names":["AngularApp","angular","module","config","$httpProvider","defaults","withCredentials","interceptors","push","$location","responseError","error","status","path","toastrConfig","autoDismiss","positionClass","preventOpenDuplicates","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","state","url","templateUrl","urlattr","run","$rootScope","ConfigSvc","IdentitySvc","AuthSvc","ModalSvc","getAppMeta","then","response","AppMeta","Name","data","name","Version","version","Description","description","Copyright","copyright","Authors","authors","PageName","bootstrapSessionUser","initGlobalModals","service","$q","$window","ApiSvc","exports","this","get","success","currentUser","loginUser","email","password","def","defer","post","sessionStorage","token","resolve","promise","logoutUser","logout","undefined","isAuthenticated","$http","ConstantsSvc","baseUrl","apiBaseUrl","bindMethods","i","arguments","length","arg","method","apiUrl","bindMethodsWithData","$compile","ModalInstance","element","options","_instance","onOpen","onClose","modal","show","width","on","css","open","close","createModal","scope","$new","append","modalInstance","modals","waitUntilReady","modalName","watch","$watch","login","controller","$scope","toastr","loginModal","message"],"mappings":"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","file":"angular-bundle.min.js","sourcesContent":["// Global Angular App Declaration\nvar AngularApp = angular.module(\"AngularApp\",\n    [\n        \"ngSanitize\",\n        \"ngAnimate\",\n        \"ngMessages\",\n        \"ui.router\",\n        \"ui.bootstrap\",\n        \"toastr\"\n    ]);\n// Configure Angular App Preferences\n\n// HTTP Configuration, like cookie, JWT and error handling\nAngularApp.config(function ($httpProvider)\n{\n    $httpProvider.defaults.withCredentials = true;\n\n    $httpProvider.interceptors.push(function ($location)\n    {\n        return {\n            \"responseError\": function (error)\n            {\n                if (error.status === 404)\n                    $location.path(\"/error/404\");\n            }\n        };\n    });\n});\n\nAngularApp.config(function (toastrConfig)\n{\n    toastrConfig.autoDismiss = true;\n    toastrConfig.positionClass = \"toast-bottom-center\";\n    toastrConfig.preventOpenDuplicates = true;\n});\n// Configure Angular App Routes\nAngularApp.config(function ($stateProvider, $urlRouterProvider, $locationProvider)\n{\n    $locationProvider.html5Mode(false);\n\n    // Home page routes\n    $stateProvider.state(\"home\",\n        {\n            url: \"/\",\n            templateUrl: \"views/home/index.html\"\n        });\n\n    // Error routes\n    $stateProvider.state(\"error\",\n        {\n            url: \"/error/:status\",\n            templateUrl: function (urlattr)\n            {\n                return \"views/error/\" + urlattr.status + \".html\";\n            }\n        });\n});\n// Configure Angular App Initialization\nAngularApp.run(function ($rootScope, ConfigSvc, IdentitySvc, AuthSvc, ModalSvc)\n{\n    // App Metadata setup\n    ConfigSvc.getAppMeta()\n        .then(function (response)\n        {\n            $rootScope.AppMeta = {\n                Name: response.data.name,\n                Version: response.data.version,\n                Description: response.data.description,\n                Copyright: response.data.copyright,\n                Authors: response.data.authors\n            };\n        });\n\n    $rootScope.PageName = \"Home\";\n\n    // Global services\n    $rootScope.IdentitySvc = IdentitySvc;\n    $rootScope.AuthSvc = AuthSvc;\n    $rootScope.ModalSvc = ModalSvc;\n\n    // Setup user in session if any\n    AuthSvc.bootstrapSessionUser();\n\n    // Init Global Modals\n    ModalSvc.initGlobalModals();\n});\nAngularApp.service(\"AuthSvc\", function ($q, $window, ApiSvc, IdentitySvc)\n{\n    var exports = this;\n\n    exports.bootstrapSessionUser = function ()\n    {\n        ApiSvc.get(\"/auth/me\")\n            .success(function (response)\n            {\n                if (response.success)\n                    IdentitySvc.currentUser = response.data;\n            });\n    };\n\n    exports.loginUser = function (email, password)\n    {\n        var def = $q.defer();\n\n        ApiSvc.post(\"/auth/login\", {email: email, password: password})\n            .success(function (response)\n            {\n                if (response.success)\n                {\n                    IdentitySvc.currentUser = response.data;\n\n                    $window.sessionStorage.token = IdentitySvc.currentUser.token;\n                }\n                else\n                {\n                    delete $window.sessionStorage.token;\n                }\n\n                def.resolve(response);\n            });\n\n        return def.promise;\n    };\n\n    exports.logoutUser = function ()\n    {\n        var def = $q.defer();\n\n        ApiSvc.post(\"/auth/logout\", {logout: true})\n            .success(function (response)\n            {\n                if (response.success)\n                {\n                    delete IdentitySvc.currentUser;\n                    delete $window.sessionStorage.token;\n                }\n\n                def.resolve(response);\n            });\n\n        return def.promise;\n    };\n});\nAngularApp.service(\"IdentitySvc\", function ()\n{\n    var exports = this;\n\n    // Current User Identity\n    exports.currentUser = undefined;\n\n    // Function to check if the current user is authenticated\n    exports.isAuthenticated = function ()\n    {\n        return !!exports.currentUser;\n    };\n});\nAngularApp.service(\"ApiSvc\", function ($http, ConstantsSvc)\n{\n    var exports = this;\n\n    var baseUrl = ConstantsSvc.apiBaseUrl;\n\n    var bindMethods = function ()\n    {\n        for (var i = 0; i < arguments.length; i++)\n        {\n            var arg = arguments[i];\n\n            exports[arg] = (function(method)\n            {\n                return function (apiUrl, config)\n                {\n                    return $http[method](baseUrl + apiUrl, config);\n                }\n            })(arg);\n        }\n    };\n\n    var bindMethodsWithData = function ()\n    {\n        for (var i = 0; i < arguments.length; i++)\n        {\n            var arg = arguments[i];\n\n            exports[arg] = (function(method)\n            {\n                return function (apiUrl, data, config)\n                {\n                    return $http[method](baseUrl + apiUrl, data, config);\n                }\n            })(arg);\n        }\n    };\n\n    bindMethods(\"get\", \"delete\", \"head\", \"jsonp\");\n    bindMethodsWithData(\"post\", \"put\", \"patch\");\n});\nAngularApp.service(\"ModalSvc\", function ($q, $http, $compile, $rootScope)\n{\n    var exports = this;\n\n    var ModalInstance = function (element, options)\n    {\n        var _instance = this;\n\n        // Fields\n        _instance.element = element;\n        _instance.state = \"default\";\n\n        _instance.onOpen = options.onOpen;\n        _instance.onClose = options.onClose;\n\n        // Init the modal\n        _instance.element.modal({\n            show: false\n        });\n\n        // Width fix\n        _instance.element.width(options.width);\n\n        // Event Handlers\n        _instance.element.on(\"show\", function ()\n        {\n            // Margin fix\n            _instance.element.css(\"margin-left\", -(_instance.element.width() / 2));\n\n            if (_instance.onOpen)\n                _instance.onOpen();\n        });\n        _instance.element.on(\"hidden\", function ()\n        {\n            if (_instance.onClose)\n                _instance.onClose();\n        });\n\n        // Open and Close functions\n        _instance.open = function ()\n        {\n            _instance.element.modal(\"show\");\n        };\n        _instance.close = function ()\n        {\n            _instance.element.modal(\"hide\");\n        };\n    };\n\n    // Create modal from Template URL\n    exports.createModal = function (templateUrl, options)\n    {\n        var def = $q.defer();\n\n        // Get the template markup from the URL provided\n        $http.get(templateUrl)\n            .success(function (response)\n            {\n                var element = angular.element(response);\n\n                var scope = $rootScope.$new(true);\n                $compile(element)(scope);\n\n                angular.element(\"#content-container\").append(element);\n\n                var modalInstance = new ModalInstance(element, options || {width: 600});\n\n                def.resolve(modalInstance);\n            });\n\n        return def.promise;\n    };\n\n    // Store for all the global modals\n    exports.modals = {};\n\n    exports.waitUntilReady = function (modalName)\n    {\n        var def = $q.defer();\n\n        var watch = $rootScope.$watch(function()\n        {\n            return !!exports.modals[modalName];\n        }, function()\n        {\n            def.resolve(exports.modals[modalName]);\n            watch();\n        });\n\n        return def.promise;\n    };\n\n    // Global modals init function\n    exports.initGlobalModals = function ()\n    {\n        // Login Modal\n        exports.createModal(\"views/_shared/auth/login.html\")\n            .then(function (modalInstance)\n            {\n                exports.modals.login = modalInstance;\n            });\n    };\n});\nAngularApp.service(\"ConstantsSvc\", function ()\n{\n    var exports = this;\n\n    exports.apiBaseUrl = \"http://localhost:3960\";\n});\nAngularApp.service(\"ConfigSvc\", function($http)\n{\n    var exports = this;\n\n    exports.getAppMeta = function()\n    {\n        return $http.get(\"angular/meta.json\");\n    };\n});\nAngularApp.controller(\"LoginModalCtrl\", function ($scope, AuthSvc, IdentitySvc, ModalSvc, toastr)\n{\n    var loginModal;\n\n    ModalSvc.waitUntilReady(\"login\")\n        .then(function(modal)\n        {\n            loginModal = modal;\n\n            // Reset the form when the modal closes\n            loginModal.onClose = function()\n            {\n                delete $scope.email;\n                delete $scope.password;\n            };\n        })\n\n    $scope.login = function ()\n    {\n        if (!$scope.email || !$scope.password)\n        {\n            toastr.error(\"Both email and password needs to be provided.\");\n            return;\n        }\n\n        AuthSvc.loginUser($scope.email, $scope.password)\n            .then(function (response)\n            {\n                if (!response.success)\n                {\n                    toastr.error(response.message);\n                    return;\n                }\n\n                // Close the login modal\n                loginModal.close();\n\n                // Display toast message\n                toastr.success(\"Welcome back \" + IdentitySvc.currentUser.email);\n            });\n    };\n});"],"sourceRoot":"/source/"}